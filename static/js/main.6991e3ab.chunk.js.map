{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","exchange_active","NavBar","props","state","exchanges","exchange_info","nombre","size","length","exch_active","display_name","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","this","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Object","keys","map","Item","onClick","setState","Component","SocketSwitch","cheked","handleChange","bind","socket","connected","alert","close","open","htmlFor","style","color","checked","onChange","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","width","io","path","transports","get_exchange","exchange_name","retorno","exchange","console","log","filter_ticker","data","exch_name","nombre_compania","stocks_info","ticker_c","stock","get_ticker_comp","filter","i","max_values","min_values","last_value","variaciones","llenado","get_volumen_compraventa","databuysell","compra","companies_tickers","key","includes","push","filter_volume_exchange","get_num_empresas","get_frac_volumen","exchange_ticker","databuy","datasell","vol_activo","get_volumen_total","vol_total","exch","toFixed","filter_by_company","ticker","get_ticker","get_quote_base","condition_exchange_active","dataupdate","Table","striped","bordered","Intl","NumberFormat","format","pais","get_pais_compania","vol_vendido","vol_comprado","get_vol_transado","currency","dataKey","verticalAlign","name","stype","stroke","emit","once","forEach","App","useState","setData","setDataBuy","setDataSell","useEffect","on","update","date","Date","time","toLocaleDateString","hour","minute","second","datazo","currentData","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6991e3ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport io from 'socket.io-client';\nimport {useEffect,useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n    BarChart,\n    Bar,\n    Line,\n    LineChart,\n    Legend,\n    XAxis,\n    YAxis,\n    Tooltip\n} from 'recharts';\n\nimport './client.css'\nimport Table from 'react-bootstrap/Table'\nimport Switch from \"react-switch\";\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\n\n\n\n\nlet exchange_active;\n\n\n\nclass NavBar extends Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            exchanges:exchange_info,\n            nombre : \"PERRO\",\n            size: exchange_info.length,\n            exch_active: null,\n            display_name: \"Ningun mercado seleccionado\",\n        };\n    }\n\n    render () {\n            return (\n                \n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">{this.state.display_name}</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                <NavDropdown title=\"Markets\" id=\"collasible-nav-dropdown\">\n                    {Object.keys(this.state.exchanges).map((nombre) => {\n                        // console.log(nombre);\n                        // console.log(this.state.exchanges[nombre]);\n                        return <NavDropdown.Item onClick={() => {this.setState({exch_active: this.state.exchanges[nombre], display_name: this.state.exchanges[nombre]['name']});exchange_active=this.state.exchanges[nombre]['name']}}>{this.state.exchanges[nombre]['name']}</NavDropdown.Item>\n                    })}\n                </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n            <SocketSwitch></SocketSwitch>\n            </Navbar>\n        );\n    }\n}\n\nclass SocketSwitch extends Component {\n  constructor() {\n      super();\n      this.state= {cheked: false};\n      this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(cheked){\n      if(socket.connected){\n          alert(\"Cerrando\");\n          socket.close()}\n      else{\n          alert(\"Abriendo\");\n          socket.open()}\n      this.setState({cheked});\n  }\n\n  render () {\n      return (\n          <label htmlFor=\"material-switch\">\n          <span style={{color: \"white\"}}>Conectarse al mundo</span>\n          <Switch\n              checked={this.state.checked}\n              onChange={this.handleChange}\n              onColor=\"#blue\"\n              onHandleColor=\"#2693e6\"\n              handleDiameter={30}\n              uncheckedIcon={false}\n              checkedIcon={false}\n              boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n              activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n              height={20}\n              width={48}\n              className=\"react-switch\"\n              id=\"material-switch\"\n          />\n          </label>\n      );\n  }\n}\nconst socket = io('wss://le-18262636.bitzonte.com', {\n    path: '/stocks',\n    transports: ['websocket','polling']\n});\n\nfunction get_exchange(exchange_info, exchange_name){\n    let retorno =null;\n    Object.keys(exchange_info).map((exchange) => {\n        if(exchange_info[exchange]['name']==exchange_name){\n            console.log(exchange_info[exchange]);\n            retorno= exchange_info[exchange];\n        }\n    });\n    return retorno;\n}\n\nfunction get_ticker_comp(nombre_compania,stocks_info){\n    let retorno = null;\n    Object.keys(stocks_info).map((stock)=>{\n        if(stocks_info[stock]['company_name']==nombre_compania){\n            retorno=stocks_info[stock]['ticker'];\n        }\n    });\n    return retorno;\n}\nfunction filter_ticker (exchange_info,data,exch_name,nombre_compania,stocks_info){\n    let exchange;\n    let ticker_c;\n    console.log(nombre_compania);\n    console.log(exch_name);\n    exchange=get_exchange(exchange_info,exch_name);\n    ticker_c = get_ticker_comp(nombre_compania,stocks_info);\n    console.log(ticker_c);\n    console.log(nombre_compania);\n    return data.filter(i=>i['ticker']==ticker_c);\n\n    \n}\nlet exchange_info=[];\nlet stocks_info=[];\nlet max_values=[];\nlet min_values=[];\nlet last_value=[]\nlet variaciones=[];\nvar llenado=0;\n\nfunction llenar_min_max_values(stocks_info){\n    if (llenado===0 && stocks_info.length > 0){\n        Object.keys(stocks_info).map((key)=>{\n            min_values[stocks_info[key]['ticker']]=1000000;\n            max_values[stocks_info[key]['ticker']]=0;\n            last_value[stocks_info[key]['ticker']]=0;\n            variaciones[stocks_info[key]['ticker']]=0;\n        })\n        llenado=1;\n    }\n    console.log(max_values,min_values);\n    \n    return 1;\n}\n\nsocket.emit('EXCHANGES',/* */);\nsocket.once('EXCHANGES',(data) => {\n    // setDataExchange(currentData=>[...currentData,data]);\n    // exchange_info=data;\n    // exchange_info[data.key]=data;\n    Object.keys(data).forEach(function(key) {\n        exchange_info[key] = data[key];\n        // console.log(key);\n        // console.log(data[key]);\n    });\n    console.log('EXCHANGE');\n    console.log(exchange_info);\n});\nsocket.emit('STOCKS',/* */);\nsocket.once('STOCKS',(data) => {\n    // setDataStocks(currentData=>[...currentData,data]);\n    Object.keys(data).forEach(function(key) {\n        stocks_info[key] = data[key];\n        // console.log(data[key]['ticker']);\n    });\n    console.log('STOCKS');\n    // console.log(stocks_info);\n});\nfunction filter_volume_exchange(exchange,databuysell,stocks_info){\n    let companies_tickers=[];\n    Object.keys(stocks_info).map((key)=>{\n        if(exchange['listed_companies'].includes(stocks_info[key]['company_name'])){\n            companies_tickers.push(stocks_info[key]['ticker']);\n        }\n    })\n    return databuysell.filter(i=>companies_tickers.includes(i['ticker']));\n}\nfunction get_volumen_compraventa(exchange,databuysell){\n    var compra=0;\n    Object.keys(filter_volume_exchange(exchange,databuysell,stocks_info)).map((key) =>{\n        \n        compra += databuysell[key]['volume'];\n    })\n    return compra;\n    \n}\nfunction get_num_empresas(exchange){\n    var num_empresas=exchange['listed_companies'].length;\n    return num_empresas;\n}\n\nfunction get_frac_volumen(exchange_info,exchange_ticker,databuy,datasell,stocks_info){\n    var vol_activo=get_volumen_total(exchange_info[exchange_ticker],databuy,datasell,stocks_info);\n    var vol_total=0;\n    Object.keys(exchange_info).map((exch)=>{\n        vol_total += get_volumen_total(exchange_info[exch],databuy,datasell,stocks_info);\n    })\n    var frac=100*vol_activo/vol_total;\n    return frac.toFixed(2);\n}\nfunction get_volumen_total(exchange,databuy,datasell,stocks_info){\n    return get_volumen_compraventa(exchange,databuy,stocks_info)+get_volumen_compraventa(exchange,datasell,stocks_info)\n}\nfunction get_pais_compania(nombre_compania,stocks_info){\n    let pais=\"\";\n    Object.keys(stocks_info).map((key)=>{\n        if (stocks_info[key]['company_name']==nombre_compania){\n            pais=stocks_info[key]['country'];\n        }\n    })\n    return pais;\n}\n\nfunction filter_by_company(ticker,databuysell){\n    return databuysell.filter(i=>i['ticker']==ticker);\n}\n\nfunction get_vol_transado(nombre_compania,stocks_info,databuy,datasell){\n    let ticker=\"\";\n    Object.keys(stocks_info).map((key)=>{\n        if (stocks_info[key]['company_name']==nombre_compania){\n            ticker=stocks_info[key]['ticker'];\n        }\n    })\n    var vol_vendido=0;\n    var vol_comprado=0;\n    Object.keys(filter_by_company(ticker,databuy)).map((key)=>{\n        vol_comprado += databuy[key]['volume'];\n\n    })\n    Object.keys(filter_by_company(ticker,datasell)).map((key)=>{\n        vol_vendido += datasell[key]['volume'];\n\n    })\n    return vol_comprado+vol_vendido;\n}\n\nfunction get_ticker(nombre_compania,stocks_info){\n    let ticker=\"\";\n    Object.keys(stocks_info).map((key)=>{\n        if (stocks_info[key]['company_name']==nombre_compania){\n            ticker=stocks_info[key]['ticker'];\n        }\n    })\n    return ticker;\n}\nfunction get_max_min_value(dataupdate){\n    console.log(min_values,max_values);\n    Object.keys(dataupdate).map((key)=>{\n        if(dataupdate[key]['value'] > max_values[dataupdate[key]['ticker']]){\n            max_values[dataupdate[key]['ticker']] =dataupdate[key]['value'];\n        }\n        if(dataupdate[key]['value'] < min_values[dataupdate[key]['ticker']]){\n            min_values[dataupdate[key]['ticker']] =dataupdate[key]['value'];\n        }\n    })\n    return 1;\n    \n}\nfunction get_quote_base(nombre_compania,stocks_info){\n    let quote=\"\"\n    Object.keys(stocks_info).map((key)=>{\n        if (stocks_info[key]['company_name']==nombre_compania){\n            quote=stocks_info[key]['quote_base'];\n            return quote;\n        }\n    })\n    return \"USD\";\n}\nfunction condition_exchange_active(exchange_info,dataupdate,exchange_active,stocks_info,databuy,datasell) {\n    var exchange = get_exchange(exchange_info,exchange_active);\n    console.log(exchange);\n    if (exchange===null){\n        return (\n            <div>\n                <h4>Información mercados disponibles</h4>\n                <Table striped bordered size=\"sm\">\n                    <thead>\n                        <tr>\n                        <th>Exchange</th>\n                        <th>Pais</th>\n                        <th>Vol Compra</th>\n                        <th>Vol Venta</th>\n                        <th>Vol Total</th>\n                        <th>Cantidad Acciones</th>\n                        <th>Participacion</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.keys(exchange_info).map((exchange_ticker) =>{\n                            \n                            return (\n                                <tr>\n                                    <td>{exchange_info[exchange_ticker]['name']}</td>\n                                    <td>{exchange_info[exchange_ticker]['country']}</td>\n                                    <td>{Intl.NumberFormat(\"de-DE\").format(get_volumen_compraventa(exchange_info[exchange_ticker],databuy,stocks_info))}</td>\n                                    <td>{Intl.NumberFormat(\"de-DE\").format(get_volumen_compraventa(exchange_info[exchange_ticker],datasell,stocks_info))}</td>\n                                    <td>{Intl.NumberFormat(\"de-DE\").format(get_volumen_total(exchange_info[exchange_ticker],databuy,datasell,stocks_info))}</td>\n                                    <td>{get_num_empresas(exchange_info[exchange_ticker])}</td>\n                                    <td>{get_frac_volumen(exchange_info,exchange_ticker,databuy,datasell,stocks_info)}%</td> \n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                    </Table>\n                    </div>\n        );\n    }else{\n        return (\n            <div>\n                <h4>Información mercados disponibles</h4>\n            <Table striped bordered size=\"sm\">\n                <thead>\n                    <tr>\n                    <th>Exchange</th>\n                    <th>Pais</th>\n                    <th>Vol Compra</th>\n                    <th>Vol Venta</th>\n                    <th>Vol Total</th>\n                    <th>Cantidad Acciones</th>\n                    <th>Participacion</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.keys(exchange_info).map((exchange_ticker) =>{\n                        \n                        return (\n                            <tr>\n                                <td>{exchange_info[exchange_ticker]['name']}</td>\n                                <td>{exchange_info[exchange_ticker]['country']}</td>\n                                <td>{Intl.NumberFormat(\"de-DE\").format(get_volumen_compraventa(exchange_info[exchange_ticker],databuy,stocks_info))}</td>\n                                <td>{Intl.NumberFormat(\"de-DE\").format(get_volumen_compraventa(exchange_info[exchange_ticker],datasell,stocks_info))}</td>\n                                <td>{Intl.NumberFormat(\"de-DE\").format(get_volumen_total(exchange_info[exchange_ticker],databuy,datasell,stocks_info))}</td>\n                                <td>{get_num_empresas(exchange_info[exchange_ticker])}</td>\n                                <td>{get_frac_volumen(exchange_info,exchange_ticker,databuy,datasell,stocks_info)}%</td> \n                            </tr>\n                        );\n                    })}\n                </tbody>\n                </Table>\n                <h4>Información del Mercado {exchange['name']}</h4>\n                <Table striped bordered size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Empresa</th>\n                            <th>Pais</th>\n                            <th>Vol Transado</th>\n                            <th>Maximo</th>\n                            <th>Minimo</th>\n                            <th>Ultimo Precio</th>\n                            <th>Variacion Porcentual</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {exchange['listed_companies'].map((nombre_compania) => {\n                            return (\n                                <tr>\n                                    \n                                    <td>{nombre_compania}</td>\n                                    <td>{get_pais_compania(nombre_compania,stocks_info)}</td>\n                                    <td>{Intl.NumberFormat(\"de-DE\").format(get_vol_transado(nombre_compania,stocks_info,databuy,datasell))}</td>\n                                    <td>{Intl.NumberFormat(\"de-DE\", {style: \"currency\", currency: get_quote_base(nombre_compania,stocks_info)}).format(max_values[get_ticker(nombre_compania,stocks_info)])}</td>\n                                    <td>{Intl.NumberFormat(\"de-DE\", {style: \"currency\", currency: get_quote_base(nombre_compania,stocks_info)}).format(min_values[get_ticker(nombre_compania,stocks_info)])}</td>\n                                    <td>{Intl.NumberFormat(\"de-DE\", {style: \"currency\", currency: get_quote_base(nombre_compania,stocks_info)}).format(last_value[get_ticker(nombre_compania,stocks_info)])}</td>\n                                    <td>{variaciones[get_ticker(nombre_compania,stocks_info)]} %</td>\n                                </tr>\n\n                            )\n                        })}\n                    </tbody>\n                </Table>\n\n            <div className=\"Grafico-Grid\">\n            {exchange['listed_companies'].map((nombre_compania) => {\n                return (<div className=\"Grafico\">\n                    <h4>{nombre_compania }</h4>\n                    <LineChart width={500} height={300} data={filter_ticker(exchange_info,dataupdate,exchange_active,nombre_compania,stocks_info)}>\n                    <XAxis dataKey=\"time\"/>\n                    <YAxis/>\n                    <Legend verticalAlign=\"top\" height={36}/>\n                    <Line name={nombre_compania} stype=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n                    <Tooltip />\n                    </LineChart>\n                </div>);\n\n            })}\n            </div> \n        </div>\n        );\n    }\n}\n\nfunction App() {\n  const [dataupdate,setData] = useState([]);\n  const [databuy,setDataBuy] = useState([]);\n  const [datasell,setDataSell] = useState([]);\n  console.log(\"PPP\");\n\n  useEffect(() => {       \n    socket.on('UPDATE',(update) => {\n        var date=new Date(update.time).toLocaleDateString([],{hour:'2-digit', minute:'2-digit',second:'2-digit'});\n        var datazo=update;\n        datazo['time']=date;\n        if (!dataupdate.length){\n            setData(currentData=>[...currentData,datazo]);\n            variaciones[datazo['ticker']]=(100 *(datazo['value']-last_value[datazo['ticker']])/last_value[datazo['ticker']]).toFixed(2);\n            last_value[datazo['ticker']]=datazo['value'];\n        }else{\n            if (dataupdate[dataupdate.length-1] != datazo){\n                setData(currentData=>[...currentData,datazo]);\n                variaciones[datazo['ticker']]=(100 *(datazo['value']-last_value[datazo['ticker']])/last_value[datazo['ticker']]).toFixed(2);\n                last_value[datazo['ticker']]=datazo['value'];\n                console.log(last_value);\n            }\n        }\n    });\n    socket.on('BUY',(value) => {\n        var date=new Date(value.time).toLocaleDateString([],{hour:'2-digit', minute:'2-digit',second:'2-digit'});\n        var datazo=value;\n        datazo['time']=date;\n        if (!databuy.length){\n            setDataBuy(currentData=>[...currentData,datazo]);\n        }else{\n            if (databuy[databuy.length-1] != datazo){\n                setDataBuy(currentData=>[...currentData,datazo]);\n            }\n        }\n    });\n    socket.on('SELL',(value) => {\n        var date=new Date(value.time).toLocaleDateString([],{hour:'2-digit', minute:'2-digit',second:'2-digit'});\n        var datazo=value;\n        datazo['time']=date;\n        if(!datasell.length){\n            setDataSell( currentData => [...currentData,datazo]);\n        }else{\n            if (datasell[datasell.length-1] != datazo){\n                setDataBuy(currentData=>[...currentData,datazo]);\n            }\n        }\n    });\n    },[]);\n  llenar_min_max_values(stocks_info);\n  return (<div>  \n        <NavBar exch={exchange_info} />\n        {condition_exchange_active(exchange_info,dataupdate,exchange_active,stocks_info,databuy,datasell)}\n    </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}